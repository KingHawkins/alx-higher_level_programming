The ``7-base_geometry`` module
==============================

Using ``BaseGeometry``
-------------------------


Importing the function from the module:
	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Passing integers as parameters
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("my_int", 12)
	>>> bg.integer_validator("width", 89)
	

Passing a string:
	>>> bg = BaseGeometry()
	>>> try:
	...	bg.integer_validator("name", "John")
	... except Exception as e:
	... 	print("[{}] {}".format(e.__class__.__name__, e))
	[TypeError] name must be an integer


Passing zero:
        >>> bg = BaseGeometry()
        >>> try:
        ...     bg.integer_validator("age", 0)
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
        [ValueError] age must be greater than 0


Passing an integer less than 0:
        >>> bg = BaseGeometry()
        >>> try:
        ...     bg.integer_validator("distance", -4)
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
        [ValueError] distance must be greater than 0

Passing a float:
        >>> bg = BaseGeometry()
        >>> try:
        ...     bg.integer_validator("age", 12.3)
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
        [TypeError] age must be an integer

Passing a list:
        >>> bg = BaseGeometry()
        >>> try:
        ...     bg.integer_validator("age", ["John", "Mary"])
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
        [TypeError] age must be an integer

Passing a tuple:
        >>> bg = BaseGeometry()
        >>> try:
        ...     bg.integer_validator("age", ("John", "Mary"))
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
        [TypeError] age must be an integer

Passing a dictionary:
        >>> bg = BaseGeometry()
        >>> try:
        ...     bg.integer_validator("age", {'John': "Mary"})
        ... except Exception as e:
        ...     print("[{}] {}".format(e.__class__.__name__, e))
        [TypeError] age must be an integer
